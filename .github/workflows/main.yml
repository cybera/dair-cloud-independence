################################
# This is a basic workflow to  #
# help you get started         #
# with Github Actions testing  #
################################

name: CI

on:
  ################################
  # Triggers the workflow on     #
  # push or pull request         #
  # events on the main or master #
  # or when triggered from the   #
  # actions tab                  #
  ################################
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

  workflow_dispatch:

################################
# A workflow run is made up of #
# one or more jobs that can    #
# run sequentially or in       #
# parallel                     #
################################
jobs:

  ################################
  # This workflow contains a     #
  # single job called "build"    #
  ################################
  build:

    ################################
    # The type of runner that      #
    # the job will run on          #
    ################################
    runs-on: ubuntu-latest

    ################################
    # Steps represent a sequence   #
    # of tasks that will be        #
    # executed as part of the job  #
    ################################
    steps:

      ################################
      # Checks-out your repository   #
      # under $GITHUB_WORKSPACE, so  #
      # your job can access it       #
      ################################
      - uses: actions/checkout@v2

      ################################
      # Set up your testing          #
      # environment                  #
      ################################
      - name: Install curl and other dependencies
        run: |
          sudo apt-get -qq install -y --no-install-recommends curl
          make create-sshkey

      - name: Setup env vars and tree
        shell: bash
        env:
          SUPER_SECRET: ${{ secrets.OPENSTACK_CONFIG }}
        run: |
          echo "$SUPER_SECRET" >> ./terraform/openstack/main.tf

      ################################
      # Layer 1 syntax checks        #
      ################################
      - name: Layer 1 Test 1 - Lint Code Base
        uses: github/super-linter@v4
        continue-on-error: true
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_BRANCH: master
          SUPPRESS_POSSUM: true
      
      - name: Layer 1 Test 2 - make plan Terraform syntax checks
        run: make plan ENV=openstack
        
      ################################
      # Run Terraform and set up     #
      # ssh config file              #
      ################################
      - name: Build Stack
        run: | 
          make auto-apply ENV=openstack        
          mkdir ~/.ssh
          cp key/id_rsa ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Host django" > ~/.ssh/config 
          echo " Hostname $(make get-public-ip ENV=openstack)" | tr -d '"' >> ~/.ssh/config
          echo " User ubuntu" >> ~/.ssh/config 
          echo " IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo " StrictHostKeyChecking no"  >> ~/.ssh/config
          echo " ConnectionAttempts 5" >> ~/.ssh/config
          echo " ConnectTimeout 10" >> ~/.ssh/config
          chmod 644 ~/.ssh/config
        
 
      ################################
      # Install Inspec on            #
      # remote server                #
      ################################

      - name: Layer 2 Setup - Install Inspec on Instance
        run: |
          ssh django "curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec"
          ssh django "sudo inspec --chef-license=accept-silent"
          ssh django "git clone https://github.com/dev-sec/linux-baseline"

      ################################ 
      # Layer 2 tests start          #
      ################################ 
      - name: Layer 2 Test 1 - curl polls
        run: curl -q http://$(make get-public-ip ENV=openstack | tr -d '"' )/polls/

      - name: Layer 2 Test 2 - Check running docker containers
        run: ssh django sudo docker ps

      ################################
      # Layer 2 Unit Tests contiinue # 
      # but with more Inspec!        #
      ################################
      - name: Layer 2 Test 3 - InSpect local system
        continue-on-error: true
        run: ssh django sudo inspec exec linux-baseline

      - name: Layer 2 Test 4 - InSpect sensu-backend Container
        continue-on-error: true
        run: ssh django sudo inspec exec linux-baseline -t docker://sensu-backend
        
      - name: Layer 2 Test 5 - InSpect grafana Container
        continue-on-error: true
        run: ssh django sudo inspec exec linux-baseline -t docker://grafana

      - name: Layer 2 Test 6 - InSpect app Container
        continue-on-error: true
        run: ssh django sudo inspec exec linux-baseline -t docker://app
        
      - name: Layer 2 Test 7 - InSpect nginx Container
        continue-on-error: true
        run: ssh django sudo inspec exec linux-baseline -t docker://nginx
        
      - name: Layer 2 Test 8 - InSpect Postgres Container
        continue-on-error: true
        run: ssh django sudo inspec exec linux-baseline -t docker://postgres

      ################################ 
      # Layer 3 End to End           #
      ################################ 
      - name: Layer 3 Setup - Install tools
        run: |
          ssh django sudo apt-get -qq install -y --no-install-recommends postgresql-client
      
      - name: Layer 3 Test 1 - Test polls site for output
        run: |
          ssh django -- "curl -s -A 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0'  --location http://localhost/polls | grep 'No polls are available.'"

      - name: Layer 3 Test 2 - Test Sensu
        run: |
          ssh django -- "curl -s -A 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0' http://localhost:3000 | grep 'Sensu'"

      - name: Layer 3 Test 3 - Test Influx
        id: influx
        run: |
          ssh django -- "curl -s -i -XPOST http://localhost:8086/query | grep 'X-Influxdb-Build'"

      - name: Layer 3 Test 4 - Test Postgres
        run: ssh django -- "pg_isready -h localhost -p 5432 -U admin | grep 'localhost:5432 - accepting connections'"
          

      ################################     
      # End -- Teardown environment  #  
      ################################
      - name: Teardown
        if: always()
        run: make destroy ENV=openstack
